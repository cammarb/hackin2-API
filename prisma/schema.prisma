// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

enum Role {
  PENTESTER
  ENTERPRISE
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id        String   @id @unique @default(uuid())
  firstName String
  lastName  String
  username  String   @unique
  email     String   @unique
  password  String
  mfa       Boolean  @default(false)
  confirmed Boolean  @default(false) // User must confirm the account through email
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role

  RefreshToken  RefreshToken[]
  CompanyMember CompanyMember?
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String   @unique
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id   String @id @unique @default(uuid())
  name String @unique

  CompanyMember CompanyMember[]
  Program       Program[]
}

model CompanyMember {
  userId      String      @unique
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId   String
  Company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyRole CompanyRole

  @@id([userId, companyId])
}

enum programStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETE
}

model Program {
  id            String        @id @unique @default(uuid())
  name          String        @unique
  companyId     String
  Company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  description   String
  programStatus programStatus @default(DRAFT)
  location      String

  Scope          Scope[]
  Bounty         Bounty[]
  SeverityReward SeverityReward[]
}

model Scope {
  id          String  @id @unique @default(uuid())
  name        String
  description String
  programId   String
  Program     Program @relation(fields: [programId], references: [id])
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model SeverityReward {
  id        String   @id @unique @default(uuid())
  severity  Severity
  min       Decimal
  max       Decimal
  programId String
  Program   Program  @relation(fields: [programId], references: [id])
  Bounty    Bounty[]
}

model Bounty {
  id               String         @id @unique @default(uuid())
  title            String
  description      String
  severityRewardId String
  SeverityReward   SeverityReward @relation(fields: [severityRewardId], references: [id])
  programId        String
  Program          Program        @relation(fields: [programId], references: [id], onDelete: Cascade)
}
