// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

enum Role {
  PENTESTER
  ENTERPRISE
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id        String   @id @unique @default(uuid())
  firstName String
  lastName  String
  username  String   @unique
  email     String   @unique
  password  String
  mfa       Boolean  @default(false)
  confirmed Boolean  @default(false) // User must confirm the account through email
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role

  RefreshToken  RefreshToken[]
  Company       Company?
  CompanyMember CompanyMember?
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String   @unique
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id      String @id @unique @default(uuid())
  name    String @unique
  ownerId String @unique
  Owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  CompanyMember CompanyMember[]
  Program       Program[]
}

model CompanyMember {
  userId      String          @unique
  User        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId   String
  Company     Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyRole CompanyRole
  Programs    ProgramMember[]

  @@id([userId, companyId])
}

model Program {
  id            String        @id @unique @default(uuid())
  name          String        @unique
  companyId     String
  Company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  description   String
  programStatus programStatus @default(NOT_STARTED)
  location      String
  createdBy

  Bounty  Bounty[]
  Members ProgramMember[]
}

enum programStatus {
  NOT_STARTED
  IN_PROGRESS
  FINISHED
}

model ProgramMember {
  programId       String
  Program         Program       @relation(fields: [programId], references: [id])
  companyMemberId String
  CompanyMember   CompanyMember @relation(fields: [companyMemberId], references: [userId])

  @@id([programId, companyMemberId])
}

model Bounty {
  id        String  @id @unique @default(uuid())
  title     String
  programId String
  Program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
}
