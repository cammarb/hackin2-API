// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id          String       @id @unique @default(uuid())
  firstName   String
  lastName    String
  username    String       @unique
  email       String       @unique
  password    String
  userProfile UserProfile?
  role        Role         @default(USER)

  RefreshTokens RefreshToken[]

  Gig    Gig[]
  Member CompanyMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String   @unique
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserProfile {
  id                String                @id @unique @default(uuid())
  qualifications    Qualification[]
  skills            SkillsOnUserProfile[]
  yearsOfExperience Int?
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String                @unique
}

model Skill {
  id   Int    @id @default(autoincrement())
  name String @unique

  UserProfiles SkillsOnUserProfile[]
}

model SkillsOnUserProfile {
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String
  Skill         Skill       @relation(fields: [skillId], references: [id])
  skillId       Int

  @@id([userProfileId, skillId])
}

model Qualification {
  id              String       @id @unique @default(uuid())
  qualification   String
  institutionName String
  startDate       DateTime
  endDate         DateTime?
  userProfileId   String
  userProfile     UserProfile? @relation(fields: [userProfileId], references: [id])
}

model Company {
  id                 String          @id @unique @default(uuid())
  companyName        String          @unique
  companyURL         String
  companyLogo        String
  companyDescription String
  members            CompanyMember[]
}

// Users within a company
model CompanyMember {
  id        String @id @unique @default(uuid())
  userId    String
  companyId String
  role      Role

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Gig Gig[]
}

model GigType {
  id          String  @id @unique @default(uuid())
  name        String  @unique
  description String?

  gig Gig[]
}

model Gig {
  id             String   @id @unique @default(uuid())
  title          String   @unique
  description    String
  requirements   String[]
  paymentDetails Decimal
  startDate      DateTime
  endDate        DateTime

  gigTypeId        String
  gigType          GigType       @relation(fields: [gigTypeId], references: [id])
  postedById       String
  postedBy         CompanyMember @relation(fields: [postedById], references: [id])
  menteeAssignedId String?
  menteeAssigned   User?         @relation(fields: [menteeAssignedId], references: [id])
}

model GigPost {
  id String @id @unique @default(uuid())
}

enum Role {
  ADMIN // Hackin2 overall Admins
  OWNER // Owner of a company
  MANAGER // Elevated permissions in a company
  GUEST
  USER
}
