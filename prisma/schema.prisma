// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

enum Role {
  PENTESTER
  ENTERPRISE
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id        String   @id @unique @default(uuid())
  firstName String
  lastName  String
  username  String   @unique
  email     String   @unique
  password  String
  mfa       Boolean  @default(false)
  confirmed Boolean  @default(false) // User must confirm the account through email
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role

  RefreshToken RefreshToken[]

  CompanyMember CompanyMember?

  Program     Program[]
  Submissions Submissions[]

  Application      Application[]
  BountyAssignment BountyAssignment[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String   @unique
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id      String  @id @unique @default(uuid())
  name    String  @unique
  website String?

  CompanyMember CompanyMember[]
  Program       Program[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model CompanyMember {
  userId      String      @unique
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId   String
  Company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyRole CompanyRole
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@id([userId, companyId])
}

enum ProgramStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETE
}

model Program {
  id            String        @id @unique @default(uuid())
  name          String        @unique
  companyId     String
  Company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  description   String
  programStatus ProgramStatus @default(DRAFT)
  location      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  Scope          Scope[]
  Bounty         Bounty[]
  SeverityReward SeverityReward[]
  Submissions    Submissions[]
  User           User?            @relation(fields: [userId], references: [id])
  userId         String?
}

model Scope {
  id          String   @id @unique @default(uuid())
  name        String
  description String
  programId   String
  Program     Program  @relation(fields: [programId], references: [id])
  Bounty      Bounty[]
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model SeverityReward {
  id        String   @id @unique @default(uuid())
  severity  Severity
  min       Decimal
  max       Decimal
  programId String
  Program   Program  @relation(fields: [programId], references: [id])
  Bounty    Bounty[]

  @@unique([programId, severity])
}

model Application {
  id        String            @id @unique @default(uuid())
  User      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Bounty    Bounty            @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  bountyId  String
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([bountyId, userId])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Bounty {
  id               String             @id @unique @default(uuid())
  title            String
  description      String
  notes            String?
  severityRewardId String
  SeverityReward   SeverityReward     @relation(fields: [severityRewardId], references: [id])
  programId        String
  Program          Program            @relation(fields: [programId], references: [id], onDelete: Cascade)
  assignedUsers    BountyAssignment[]
  status           BountyStatus       @default(PENDING)
  scope            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Scope            Scope?             @relation(fields: [scopeId], references: [id])
  scopeId          String?
  Application      Application[]
}

enum BountyStatus {
  PENDING
  IN_PROGRESS
  DONE
}

model BountyAssignment {
  id       String       @id @unique @default(uuid())
  bountyId String
  Bounty   Bounty       @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  userId   String
  User     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status   BountyStatus @default(IN_PROGRESS)

  assignedAt  DateTime      @default(now())
  Submissions Submissions[]

  @@index([bountyId, userId])
}

model Submissions {
  id                 String           @id @unique @default(uuid())
  bountyAssignmentId String
  BountyAssignment   BountyAssignment @relation(fields: [bountyAssignmentId], references: [id], onDelete: Cascade)
  userId             String
  User               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  asset    String
  evidence String
  impact   String
  findings String[]
  status   SubmissionStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Program   Program? @relation(fields: [programId], references: [id])
  programId String?

  @@unique([bountyAssignmentId, userId])
}

enum SubmissionStatus {
  PENDING
  IN_REVIEW
  REVIEWED
  RESOLVED
}
